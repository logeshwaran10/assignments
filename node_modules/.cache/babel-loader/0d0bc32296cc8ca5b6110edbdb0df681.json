{"ast":null,"code":"import { takeEvery, all, put, call } from 'redux-saga/effects';\nimport actions from '../actions/Actions';\nimport baseUrl from '../URLsetup/Baseurl';\nimport { message } from 'antd';\nexport function* registerUser(params) {\n  try {\n    const response = yield call(baseUrl.post, `/users/register`, params.payload, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    message.success('successfully registered');\n    localStorage.setItem('userData', JSON.stringify(response.data));\n    yield put({\n      type: actions.REGISTER_USER_SUCCESS,\n      payload: response.data\n    });\n  } catch (e) {\n    message.error('Already registered');\n    yield put({\n      type: actions.REGISTER_USER_FAILURE\n    });\n  }\n}\nexport function* loginUser(params) {\n  try {\n    const response = yield call(baseUrl.post, `/users/login`, params.payload, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    message.success('successfully loggedIn');\n    localStorage.setItem('userData', JSON.stringify(response.data));\n    yield put({\n      type: actions.LOGIN_USER_SUCCESS,\n      payload: response.data\n    });\n  } catch (e) {\n    message.error('Bad credential');\n    yield put({\n      type: actions.LOGIN_USER_FAILURE\n    });\n  }\n}\nexport default function* rootSaga() {\n  yield all([yield takeEvery(actions.REGISTER_USER, registerUser), yield takeEvery(actions.LOGIN_USER, loginUser)]);\n}","map":{"version":3,"sources":["/Users/logeshwaran/demo2/src/sagas/index.js"],"names":["takeEvery","all","put","call","actions","baseUrl","message","registerUser","params","response","post","payload","headers","success","localStorage","setItem","JSON","stringify","data","type","REGISTER_USER_SUCCESS","e","error","REGISTER_USER_FAILURE","loginUser","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","rootSaga","REGISTER_USER","LOGIN_USER"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,IAA7B,QAAwC,oBAAxC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,OAAO,UAAUC,YAAV,CAAuBC,MAAvB,EAA8B;AACjC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACE,OAAO,CAACK,IAAT,EAAgB,iBAAhB,EACvBF,MAAM,CAACG,OADgB,EAEvB;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAFuB,CAA3B;AAIAN,IAAAA,OAAO,CAACO,OAAR,CAAgB,yBAAhB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeR,QAAQ,CAACS,IAAxB,CAAjC;AACA,UAAMhB,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEf,OAAO,CAACgB,qBAAf;AAAsCT,MAAAA,OAAO,EAAEF,QAAQ,CAACS;AAAxD,KAAD,CAAT;AACH,GARD,CAQE,OAAOG,CAAP,EAAU;AACRf,IAAAA,OAAO,CAACgB,KAAR,CAAc,oBAAd;AACA,UAAMpB,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEf,OAAO,CAACmB;AAAf,KAAD,CAAT;AAEH;AAEJ;AAAA,OAAO,UAAUC,SAAV,CAAoBhB,MAApB,EAA2B;AAC/B,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMN,IAAI,CAACE,OAAO,CAACK,IAAT,EAAgB,cAAhB,EACvBF,MAAM,CAACG,OADgB,EAEvB;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAFuB,CAA3B;AAIAN,IAAAA,OAAO,CAACO,OAAR,CAAgB,uBAAhB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeR,QAAQ,CAACS,IAAxB,CAAjC;AACA,UAAMhB,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEf,OAAO,CAACqB,kBAAf;AAAmCd,MAAAA,OAAO,EAAEF,QAAQ,CAACS;AAArD,KAAD,CAAT;AACH,GARD,CAQE,OAAOG,CAAP,EAAU;AACRf,IAAAA,OAAO,CAACgB,KAAR,CAAc,gBAAd;AACA,UAAMpB,GAAG,CAAC;AAACiB,MAAAA,IAAI,EAAEf,OAAO,CAACsB;AAAf,KAAD,CAAT;AACH;AACJ;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAM1B,GAAG,CAAE,CACP,MAAMD,SAAS,CAACI,OAAO,CAACwB,aAAT,EAAwBrB,YAAxB,CADR,EAEP,MAAMP,SAAS,CAACI,OAAO,CAACyB,UAAT,EAAqBL,SAArB,CAFR,CAAF,CAAT;AAIH","sourcesContent":["import {takeEvery, all, put, call} from 'redux-saga/effects';\nimport actions from '../actions/Actions';\nimport baseUrl from '../URLsetup/Baseurl';\nimport { message } from 'antd';\n\nexport function *registerUser(params){\n    try {\n        const response = yield call(baseUrl.post, `/users/register`,\n            params.payload,\n            { headers: { 'Content-Type': 'application/json' } }\n        )\n        message.success('successfully registered');\n        localStorage.setItem('userData', JSON.stringify(response.data));\n        yield put({type: actions.REGISTER_USER_SUCCESS, payload: response.data});\n    } catch (e) {\n        message.error('Already registered');\n        yield put({type: actions.REGISTER_USER_FAILURE});\n\n    }\n\n}export function *loginUser(params){\n    try {\n        const response = yield call(baseUrl.post, `/users/login`,\n            params.payload,\n            { headers: { 'Content-Type': 'application/json' } }\n        )\n        message.success('successfully loggedIn');\n        localStorage.setItem('userData', JSON.stringify(response.data));\n        yield put({type: actions.LOGIN_USER_SUCCESS, payload: response.data});\n    } catch (e) {\n        message.error('Bad credential');\n        yield put({type: actions.LOGIN_USER_FAILURE});\n    }\n}\n\nexport default function* rootSaga() {\n    yield all ([\n        yield takeEvery(actions.REGISTER_USER, registerUser),\n        yield takeEvery(actions.LOGIN_USER, loginUser),\n    ])\n}"]},"metadata":{},"sourceType":"module"}